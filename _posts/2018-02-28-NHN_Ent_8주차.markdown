---
layout: post
title:  "NHN Entertainment 8주 차"
comments: true
categories: NHN_Entertainment
tags: 
- NHN_Entertainment
- 토스트루키 5기
author: cpmsz
description: "베이스 캠프 8주 차"

---

**베이스캠프 8주 차**
  
# Part 1

## Chapter 1

성능 테스팅은 주어진 부하에서 응답성, 처리량, 안전성 또는/혹은 시스템의 확장성을 결정하는 테스트의 종류다.
  
  
성능 테스트는 다음과 같은 단계로 이루어진다.
  
단계 1. 테스트 환경을 확인한다
단계 2. 성능 합격 기준을 확인한다
단계 3. 테스트를 계획하고 설계한다
단계 4. 테스트 환경을 설정한다.
단계 5. 테스트 디자인을 구현한다.
단계 6. 테스트를 실행한다.
단계 7. 결과와 보고서를 분석하고 다시 테스트한다.
  
  
이러한 성능 테스팅은 보통 4가지 이유에서 실행된다.
  
첫 번째는 출시 가능 여부를 평가하기 위해
두 번째는 인프라의 적절성을 평가하기 위해
세 번째는 개발된 소프트웨어의 적절성을 평가하기 위해
마 지막으로 성능 튜닝의 효율성을 향상하기 위해 실행된다. 
  
성능 테스팅을 성공적으로 하기 위해서는 테스트의 방법과 테스트 자체가 프로젝트의 배경과 연관이 있어야 한다. 배경에 대한 이해가 없으면 시간을 낭비하거나 좌절하는 등 실패하게 된다. 
  
성능 테스트와 연관이 있는 배경에는 프로젝트의 비전, 시스템의 목적, 고객이나 사용자의 기대, 사업 진행자, 성능 테스트의 이유, 성능 테스트가 프로젝트에 가져다주는 가치, 프로세스, 준수해야 될 기준, 프로젝트 일정 등이 있다.
  
  
성능 테스트를 하다 보면 시스템이나 애플리케이션의 특성이 용납불가능 하다고 생각될 때가 있는데 이때 많은 팀이 성능 테스팅에서 성능 튜닝으로 초점을 옮긴다. 이 이유 외에도 기준은 충족하지만 사용되는 자원의 양을 줄이기 위해, 필요한 하드웨어 양을 줄이기 위해, 성능을 향상하기 위해 실행할 때도 있다.
  
이러한 성능 튜닝을 할 때 튜닝이 비록 테스터의 직접적인 책임은 아니지만 연관된 모든 사람과 협동적으로 노력할 경우 가장 효과적이다.
  
  
성능 테스트는 보통 3가지 카테고리에 속한다고 설명한다.
성능 테스팅 이 종류의 테스팅은 시스템이나 애플리케이션의 속도, 확장성 안정성과 같은 특성을 결정하거나 유효한지 검사한다.
부하 테스팅 시스템이나 애플리케이션의 작업 중 예상되는 부하와 관련된 특성을 결정하거나 유효한지 검사한다.
스트레스 테스팅 시스템이나 애플리케이션이 예상되는 조건을 초과할 경우의 특성을 결정하거나 유효한지 검사한다. 스트레스 테스팅은 제한된 메모리, 부족한 디스크 공간, 서버 장애 같은 상황에서의 특성을 결정하거나 유효성을 검사하는 것 또한 포함한다.
  
  
이러한 과정을 거쳐 성능 테스팅이나 튜닝이 끝나면 기준선을 만들어 평가하면 된다.
  
기준선을 만드는 이유는 시스템이나 애플리케이션의 성능 향상을 위한 변경의 효과를 평가하기 위해서이다. 기준선의 중요한 요소 중 하나는 비교를 위해 특별히 변경된 것을 제외하면 모든 것이 같아야 한다는 것이다. 그렇지 않을 경우 유효한 비교 근거가 될 수 없다.
  
  
## Chapter 2

성능 테스트의 종류
* 성능 테스트
    * 목적
      * 속도, 확장성, 안정성을 결정하거나 검증하기 위해 시행
    * 장점
      * 애플리케이션의 속도, 확장성, 안정성을 결정해주어 사업적 결정을 내리는데 필요한 정보를 제공함
      * 시스템의 사용자가 성능에 만족하는지 판단함
      * 성능에 대한 기대치와 현실의 불일치를 확인함
      * 튜닝, 용량 계획, 최적화를 지원함.
    * 단점
      * 부하가 걸릴 때 나타나는 결함을 감지 못 함
      * 신중하지 못하게 설계하고 검증할 경우 아주 적은 경우에서만 성능 특성이 나타날 수 있음
      * 테스트가 사용자가 쓸 제품 하드웨어에서 실행되지 않으면 검사 결과와 동일하지 않을 가능성이 있음
    * 필요한 상황
      * 애플리케이션을 개발한 후 사용자의 요구사항을 모두 만족했는지 테스트하려고 할 때
      
* 부하 테스트
    * 목적
      * 정상적인 상황과 작업량이 최대인 상황에서 애플리케이션의 동작을 확인하기 위해 시행
    * 장점
      * 부하가 절정일 때 처리량이 얼마나 필요한지 결정할 수 있음
      * 하드웨어 환경의 적합성을 처리할 수 있음
      * 로드 밸런서의 적합성을 평가할 수 있음
      * 동시성 문제를 찾을 수 있음
      * 부하가 걸렸을 시 기능 오류를 찾을 수 있음
      * 확장성과 용량 계획을 목적으로 데이터를 수집할 수 있음
      * 성능이 저하되기 전 애플리케이션이 얼마나 많은 사용자를 처리할 수 있는지 결정하는 데 도움을 줌
      * 자원 활용 한도가 초과하기 전에 얼마나 많은 부하를 하드웨어가 처리할 수 있는지 결정하는 데 도움을 줌
    * 단점
      * 응답 속도에 집중하도록 설계되지 않음
      * 결과를 다른 부하 테스트와 비교할 때만 사용해야 함
    * 필요한 상황
        * 예상 범위 안의 사용자들이 애플리케이션을 사용할 경우 애플리케이션이 원하는 데로 동작하는지 테스트하려고 할 때
  
* 스트레스 테스트
    * 목적
      * 정상적이거나 작업량이 최대인 상황을 초과했을 때 애플리케이션의 동작을 결정하거나 검증하기 위해 시행
    * 장점
      * 시스템에 과부하가 걸릴 경우 데이터가 손상될지 판단할 수 있음
      * 애플리케이션이 속도 저하 이외에 실패나 오류가 발생하기 전 얼마나 많은 부하를 견딜 수 있는지 측정 가능함
      * 오류가 발생하기 직전에 애플리케이션 모니터링 트리거를 실행시킬 수 있도록 해줌
      * 스트레스가 많을 경우 보안 취약성이 생기지 않는지 확인 가능함
      * 하드웨어나 애플리케이션이 오류를 일으킬 때 부작용을 확인 가능함
      * 어떤 종류의 오류가 계획에서 가장 중요한지 결정하는 데 도움을 줌
    * 단점
      * 스트레스 테스트는 비현실적으로 디자인되기 때문에 이해관계자가 테스트 결과를 받아들이지 않을 수 있음
      * 많은 경우 어느 정도 스트레스를 줘야 좋을지 결정하기가 힘듦
      * 테스트 환경이 격리되지 않으면 심각한 혼란을 만들 수 있는 애플리케이션이나 네트워크 오류가 발생할 수 있음
    * 필요한 상황
      * 사용자가 예상 밖으로 많아지거나 갑자기 증가할 경우 애플리케이션이 원하는 데로 동작하는지 테스트 할때
  
* 수용력 테스트
    * 목적
      * 시스템이 얼마나 많은 사용자나 트랜잭션을 지원할 수 있는지와 여전히 성능 목표를 달성할 수 있는지를 결정하기 위해
    * 장점
      * 사업적 요구 사항을 처리하기 위해 어느 정도의 부하까지 처리 가능한지 정보를 제공함
      * 용량 계획자가 모델이나 예측을 검증하거나 향상할 때 사용할 수 있는 실제 데이터를 제공
      * 용량 계획 모델 및 예측을 비교하기 위한 다양한 테스트를 실행할 수 있도록 해줌
      * 용량 계획을 돕기 위해 기존 시스템의 현재 사용량 및 용량, 동향을 알려줌
    * 단점
      * 용량 모델 검증 테스트는 작성하기가 복잡함
      * 용량 계획의 모든 측면을 가장 가치가 있는 시점에 테스트를 통해 검증할 수 없음
    * 필요한 상황
      * 서비스가 점차 커지거나 사용자가 많아지면서 시스템의 스케일 아웃이나 업을 검토하려고 할 때

## Chapter 3

* 위험의 종류
    * 속도 관련 위험
      * 특징
        * 대부분의 사람이 생각하는 위험의 종류이며 사용자의 만족도에만 국한되지 않음. 특정 사업과 데이터 관련 위험 요인이기도 함.
      * 종류
        * 사용자 만족도
        * 동시성
        * 서비스 수준 계약 위반
        * 응답 시간 동향
        * 구성
        * 일관성
    * 확장성 관련 위험
      * 특징
        * 애플리케이션이 지원할 수 있는 사용자에게만 국한된 게 아니라 데이터의 양과 응용 프로그램의 용량과 관련된 위험도 포함됨.
      * 종류
        * 수용력
        * 용량
        * 서비스 수준 계약 위반
        * 최적화
        * 효율
        * 미래 성장도
        * 자원 소비
        * 하드웨어 / 환경
        * 서비스 수준 계약 위반 (위의 SLA 계약 위반과 같은 거 같은데 차이를 모르겠음)
    * 안정성 관련 위험
      * 특징
        * 안정성은 신뢰성, 가동시간, 복구 가능성 등을 포함함. 고부하, 내구성, 스트레스 테스트에서 대부분 해결됨.
      * 종류
        * 신뢰성
        * 견고성
        * 하드웨어 / 환경
        * 오류 모드
        * 느린 누수
        * 서비스 수준 계약 위반
        * 복구
        * 데이터 정확도 및 보안
        * 인터페이스
# Part 2
* 성능 테스트 핵심 활동
  
    * 단계 1. 테스트 환경을 확인한다
    테스트 팀이 물리적 테스트 환경과 제품 환경에서 사용 가능한 툴과 자원들을 확인한다. 
    물리적 환경은 하드웨어 소프트웨어 네트워크 설정 등을 포함한다. 처음부터 테스트 환경을 철저히 이해한다면 좀 더 효율적인 테스트 디자인과 계획이 가능하며 프로젝트 초기에 테스팅 문제를 확인하는 데 도움이 된다.
    몇몇 상황에서 이 프로세스는 프로젝트의 라이프 사이클에 따라 일정 주기마다 반드시 다시 수행해야 한다.
    
    * 단계 2. 성능 허용 기준을 확인한다
    응답 시간, 처리량, 자원 이용 목표 및 제약을 확인한다.
    보통 응답 시간은 사용자의 관심사이며, 처리량은 사업 관심사, 자원 이용은 시스템 관심사이다. 추가로 저런 목표와 제약에 구애받지 않는 프로젝트 성공 기준을 확인한다.
    예를 들어 어떤 설정들의 조합이 원하는 성능을 내는지 알기 위해 성능 테스트를 사용한다.
    
    * 단계 3. 테스트를 계획하고 설계한다
    중요 시나리오를 확인하고, 대표 사용자 간의 변동성을 결정하고 어떻게 변동성을 시뮬레이션할지, 테스트 데이터를 정의하고 수집되어야 할 통계수치를 만든다.
    
    * 단계 4. 테스트 환경을 설정한다.
    테스트 환경, 도구, 각 전략을 기능으로 실행하는데 필요한 자원, 테스트를 위해 사용 가능한 구성요소들을 준비한다.
    
    * 단계 5. 테스트 디자인을 구현한다.
    테스트 디자인에 따라 성능 테스트를 개발한다.
    
    * 단계 6. 테스트를 실행한다.
    테스트를 실행하고 관찰하며 테스트, 테스트 데이터, 테스트 결과를 검증한다.
    
    * 단계 7. 결과와 보고서를 분석하고 다시 테스트한다.
    결과 데이터를 통합하고 공유해라. 데이터를 개인과 교차 기능 팀 단위로 같이 분석한다

* 반복적인 성능 테스트 활동
      
    * 단계 1. 프로젝트의 비전과 배경을 이해한다.
      * 프로젝트의 비전과 배경은 어떤 성능 테스트가 필요하고 가치 있는지를 결정하기 위한 기초이다.
    * 단계 2. 성능 테스트를 하는 이유를 확인한다.
      * 이유는 비전과 배경에서 항상 명확하진 않다. 이유를 명시적으로 확인하는 것은 어떤 성능 테스팅 활동이 프로젝트에 제일 좋은 가치를 더할지 판단하게 해준다.
    * 단계 3. 성능 테스트가 프로젝트에 더해주는 가치를 확인한다.
      * 1단계와 2단계에서 얻은 정보를 사용해 성능 테스트를 통해 얻은 값을 명확히 하고 값을 변환하여 개념적 성능 테스트 전략에 넣어라.
    * 단계 4. 테스트 환경을 설정한다.
      * 개념적 전략을 수립하고 테스트를 하며 전략을 실행할 때 사용할 기능과 구성 요소들을 위한 자원과 필요한 도구를 준비해라.
    * 단계 5. 작업을 조정하고 확인한다.
      * 성능 테스트 작업은 독립적으로 발생하지 않는다. 이러한 이유로 성능 전문가는 팀과 일하여 우선순위를 정하고 조정하여 작업을 효율적이고 성공적으로 끝내야 한다.
    * 단계 6. 작업을 실행한다.
      * 1~2일 단위로 작업을 수행한다. 테스트 통과하는 것을 보다가 만약 추가적인 가치를 더할 기회가 있다면 그렇게 하라.
    * 단계 7. 결과와 보고서를 분석한다.
      * 반복적인 프로세스를 따라가기 위해 결과를 신속하게 분석하고 공유해야 한다.
    * 단계 8. 단계 1에서 3을 재실행하고 성능 수용 기준을 고려한다.
      * 반복작업 간에 기초적인 정보가 변경되지 않았나 확인해라. 필요에 따라 고객 피드백 같은 새로운 정보를 통합하고 전략을 수정하라.
    * 단계 9. 작업 우선순위를 결정한다.
      * 테스트 결과, 새로운 정보, 구성 요소와 기능들의 가용성을 토대로 우선순위를 정하고 작업을 전략에서 더하고 빼라. 그리고 단계 5로 돌아가라.
  
* CMMI 성능 테스팅 활동
    * 단계 1. 프로세스 및 준수 기준을 이해한다.
      * 프로세스와 준수 요구 사항들을 이해하는 과정이 필요하다.
    * 단계 2. 시스템과 프로젝트 계획을 이해한다.
      * 테스트할 시스템에 대한 상세한 이해가 요구되며 시스템 개발을 위한 프로젝트의 세부 사항을 이해해야 한다.
    * 단계 3. 성능 수용 기준을 확인한다.
      * 성능 목표와 요구 사항을 확인해야 하며 성능 테스트 목적을 확인하는 것 또한 포함된다.
    * 단계 4. 성능 테스팅 단계들을 계획한다.
      * 프로젝트 계획에 작업 해야 될 항목을 매핑하고 기간을 결정하고, 작업의 우선순위를 정하고, 세부 사항을 추가하는 작업이 포함된다.
    * 단계 5. 테스트들을 디자인한다.
      * 주요 사용 시나리오를 확인하고, 적당한 사용자 변동을 결정하고(?), 테스트 데이터를 확인하고 생성, 수집할 매트릭스를 만든다.
    * 단계 6. 테스트 환경을 설정한다.
      * 실제 테스트 환경을 설정한다.
    * 단계 7. 테스트 디자인을 구현한다.
      * 테스트를 만든다.
    * 단계 8. 작업 해야 될 항목들을 실행한다.
      * 성능 테스트 작업 항목을 실행한다.
    * 단계 9. 아카이브 데이터와 결과들을 보고한다.
      * 결과를 통합하고 팀 간에 데이터를 공유한다.
    * 단계 10. 계획을 변경하고 변경에 대한 승인을 얻는다.
      * 필요에 따라 계획을 검토하고 조정한다.
    * 단계 11. 단계 5로 돌아간다.
      * 반복과 체크포인트 릴리즈를 통한 지속적인 테스트를 한다.
    * 단계 12. 최종 보고서를 준비한다.
      * 최종 보고서를 작성, 제출, 수락한다.


# Part 3

* 시스템 평가를 위한 접근법
    * 시스템 평가를 위한 활동들
      * 사용자 지향 기능을 확인한다.
      * 사용자가 시작하지 않은 프로세스들과 기능들을 확인한다.
      * 예상되는 사용자 활동을 결정한다.
      * 예상하지 못했지만 납득 가능한 잠재적인 사용자 활동을 개발한다.
      * 테스트와 제품 아키텍처 둘 다를 위한 정확한 모델을 개발한다.
      * 아키텍처를 사용하는 다른 프로세스나 시스템을 확인한다.
    * 단계별 활동
      * 시스템 기능 및 / 또는 사업 프로세스 단계
        * 성능 수용 기준을 만드는 데 도움이 되는 핵심 기능을 식별하는 단계.
        * 성능 테스트를 위해서 시스템의 핵심 기능을 식별하는 건 필수적임.
        * 시스템을 테스트할 제일 나은 방법을 결정하려면 시스템을 완벽하게 이해해야 됨.
        * 이를 위해 이해 관계자와 만나 시스템의 전반적인 목적을 결정해야 함.
      * 사용자 활동 단계
        * 테스트 중인 애플리케이션의 주요 사용자 활동을 확인
        * 모든 사용자의 작업이나 활동을 성능 테스트에서 시뮬레이트하는 것은 사실상 불가능하며 비실용적
        * 그렇기 때문에 시뮬레이션할 가장 중요한 활동을 결정해야 함.
        * 이를 위해 경쟁 웹사이트나 프로그램을 평가하는 것도 좋음.
      * 논리적, 물리적 아키텍처 단계
        * 애플리케이션과 하드웨어, 소프트웨어 구조 사이의 관계를 확인
        * 시스템 아키텍처를 제대로 이해하지 못한 경우 나중에 성능 테스트에 부정적인 영향을 줌
        * 아키텍처라는 용어가 다양한 방식으로 사용되기 때문에 추가 설명함.
        * 논리적 아키텍처
          * 클라이언트 계층
            * 요청된 데이터를 제공
          * 프레젠테이션 계층
            * 모든 비즈니스 로직을 제어하고 클라이언트에게 데이터 전달
          * 데이터 저장소 계층
            * 보통 DB에서 시스템이 사용하는 데이터를 관리
        * 물리적 아키텍처
            * 실제 하드웨어
              * 그림에는 FW, LB, W, A, DB, R과 같은 장비가 있음
              * LB는 로드 밸런서, DB는 데이터 베이스인 것 같은데 나머진 모르겠음.
          * 시스템 구조
            * 논리적 아키텍처와 물리적 아키텍처를 통합한 것

# Part 4
  
* 성능 테스트의 목적
  
    * 목적 결정 단계
      
      * 단계 1. 전체 목표 결정
        * 애플리케이션이 계약, 규정, 서비스 수준 계약을 준수하는지 결정
        * 조정할 병목 현상 탐지
        * 개발팀이 다양한 구성 옵션과 성능 특성에 관해 결정할 때 도와주기?
        * 확장성과 용량계획을 위한 데이터 제공
        * 애플리케이션이 제품환경으로 배치할 준비가 됐는지 결정
      
        * 단계 2. 프로젝트 계획 검토
          * 팀원이나 소그룹과 프로젝트 계획을 리뷰한다.
          * 마지막 반복과 이번 반복 사이에서 어떤 기능, 아키텍처, 하드웨어가 변경될 것인가 검토
          * 이 변경으로 인해 튜닝이 필요한지 검토
          * 이 변경이 이전 테스트하거나 수집한 데이터에 영향을 주는지 검토
          * 이러한 변화와 관련된 위험이나 중요한 걱정이 뭔지 검토
      
        * 단계 3. 아키텍처 검토
          * 팀원이나 소그룹과 물리적, 논리적 아키텍처를 리뷰한다.
          * 이 아키텍처를 그전에 사용해보거나 해본 적이 있는지 검토
          * 프로세스 초기에 아키텍처가 수용 가능한 파라미터와 수행되는지 어떻게 결정할 수 있는지 검토
          * 아키텍처가 튜닝이 필요한지 검토
    * 리소스 사용 목표 및 임곗값 캡처 또는 예측 
      * 일반적으로 프로세서 사용률이 80%를 초과하면 서버의 성능이 크게 저하됨
    * 리소스 예산 캡처 또는 예측
      * 성능 테스터의 임무는 예산과 할당에 관한 정보를 수집하고 제공하는 것 
    * 지표 식별
      * 이것을 테스트하지 않고 싶을 수는 있지만 테스트한다면 해야 되는 건 정해져 있음
    * 결과 전달
    * 사용자 응답 시간 목표 정량화
      * 애플리케이션 기능 및 사용량 결정 범주
        * 자주 사용되는 시나리오
        * 성능 집약적인 시나리오
        * 업무에 중요한 시나리오
        * 특별 관심사에 관한 시나리오
      * 성능 요구 사항들과 목표에 대해 캡처하고 언어화
        * 비록 소프트웨어 개발 초기에 이 활동을 하는 것이 좋지만 나중에 주기적으로 다시 하는 것 또한 중요함.
        * 이 활동을 아무리 잘 수행해도 계약, 인식, 사업 진행자, 우선순위는 새로운 정보가 생기면 변경될 수 있다.
      * 성과 요구 사항 및 목표 정량화
        * 요구사항은 구체적이어야 하며 적용되는 시스템의 상태나 조건을 지정해야 함
        * 요구 사항을 목표와 분리
        * 캡처된 성능 목표들을 정량화
        * 캡처된 성능 요구사항들을 정량화
      * 성과 요구 사항 및 목표 기록
    * 다양한 타입의 성능 합격 기준 통합
      * 합격 기준 통합을 위한 접근법
    * 사용자의 요구 사항 조사
      * 가장 중요한 특성은 사용자가 성능 저하로 좌절하지 않아야 한다
      * 속도가 느려서 사용자가 좌절하면
        * 얼마나 많은 사용자를 지원하든
        * 얼마나 많은 데이터를 처리할 수 있든
        * 자원을 얼마나 효율적으로 사용하든
        * 아무 의미가 없다
        * 비즈니스 요구 사항 수집
            * 진정한 과제는 사업적 요구 사항도 충족시키는 것뿐만 아니라 시간과 예산 범위 안에서 만드는 것이다.
        * 기술적 요구 사항 결정
          * 보통 기술적 성능 특성은 간접적으로 다른 요구사항과 관련됨.
          * 이를 파악하고 관리하기 위해
            * 성능 테스트의 목적을 결정
            * 리소스 사용 대상이나 임계 값을 예측 및 캡처
            * 리소스 예산이나 할당을 예측 및 캡처
            * 측정법을 확인
            * 결과 공유
            * 변화하는 목표, 대상, 예산 등을 따라감
        * 기준, 계약 등을 연구
            * 사용자의 만족, 예산, 일정에 얼마나 큰 영향을 끼치냐와는 상관없이 협상할 가능성이 가장 적은 카테고리다.
        * 성능 테스트 목표 수립
          * 프로젝트가 처음 시작할 때 테스트 목표를 수집하는 것이 가장 중요하지만, 정기적으로 다시 수행하는 것 또한 중요함
        * 성능 특성 통합과 비교
          * 각 범주들의 성능 특성을 확인했다면 비교하고 통합하는 것이 중요함
        * 성능 계획 리뷰 및 수정
          * 소프트웨어 개발의 많은 점과 같이 성능 계획도 계속 변함.
          * 한 번에 완벽하길 기대하지 말고 디자인, 계획, 요구사항 등에 계속 맞춰가는 것이 중요
